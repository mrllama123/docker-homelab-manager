[tool.poetry]
name = "docker-homelab-manager"
description = "a simple web app to manage homelab docker compose services"
authors = ["Bob Bruce <piesrule123@gmail.com>"]
version = "0.1.0"
packages = [{ include = "src" }]

readme = "README.md"
license = "GPL-3.0-or-later"

classifiers = [
    # Get the list of trove classifiers here: https://pypi.org/classifiers/
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
homepage = "https://github.com/mrllama123/docker-homelab-manager"
# keywords = ["awesome", "project"]  # Maximum of 5 keywords

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
fastapi = { extras = ["all"], version = "^0.111.0" }
uvicorn = { extras = ["standard"], version = "^0.29.0" }
python-on-whales = "^0.71.0"
sqlmodel = "^0.0.19"
apscheduler = "^3.10.4"
alembic = "^1.13.1"
jinja2 = "^3.1.3"


[tool.poetry.group.dev.dependencies]
black = "^24.2.0"
mypy = "^1.0.1"
pytest = "^8.3.3"
pytest-clarity = "^1.0.1"
pytest-cov = "^5.0.0"
shed = "^2024.1.1"
toml = "^0.10.2"
pytest-mock = "^3.12.0"
watchdog = "^4.0.0"
pylint = "^3.0.3"
freezegun = "^1.4.0"
ipykernel = "^6.29.0"
pytest-snapshot = "^0.9.0"

[tool.poe.tasks]
###
# Lint/Formatting tasks
###

[tool.poe.tasks.check_black]
cmd = "black --check src"

[tool.poe.tasks.check_imports]
cmd = "isort --check-only --profile=black src"

[tool.poe.tasks.ruff-fix]
cmd = "ruff check src --fix"
help = "Ruff autofix"

[tool.poe.tasks.ruff]
cmd = "ruff check src"
help = "Run Ruff on codebase"

[tool.poe.tasks.format-check]
shell = "ruff format src --check"
help = "Format code check"


[tool.poe.tasks.lint]
sequence = ["format-check", "ruff"]

[tool.poe.tasks.format]
shell = "ruff format src"
help = "Format code"

[tool.poe.tasks.clear-cache]
cmd = 'sudo find . -type d -name "__pycache__" -exec rm -r {} +'
help = "Clear python cache"

###
# Dev tasks
###


[tool.poe.tasks.local-dev]
sequence = ["migrate", "api-dev"]
help = "run api locally without docker"

[tool.poe.tasks.dev]
cmd = "docker compose -f docker-compose-dev.yml  up  --build"
help = "run api on docker"

[tool.poe.tasks.download-assets]
script = "scripts:download_frontend_assets"
help = "download frontend assets"

[tool.poe.tasks.api-dev]
shell = "mkdir -p ${BACKUP_DIR} && uvicorn src.main:app --reload --reload-dir src --reload-exclude *__pycache__* --log-config=src/config/log_config.yaml"
help = "Run the API in dev mode"
envfile = ".env"
env = { APSCHEDULE_JOBSTORE_URL = "sqlite:///${DB_DIR}/scheduler.db", DATABASE_URL = "sqlite:///${DB_DIR}/database.db" }


###
# Database tasks
###

[tool.poe.tasks.migrate]
shell = "mkdir -p ${DB_DIR} && alembic upgrade ${revision}"
help = "Run alembic migration on ${revision}"
envfile = ".env"
args = [{ name = "revision", positional = true, default = "head" }]
env = { DATABASE_URL = "sqlite:///${DB_DIR}/database.db" }

[tool.poe.tasks.downgrade]
cmd = "alembic downgrade ${revision}"
help = "Run alembic migration on ${revision}"
envfile = ".env"
args = [{ name = "revision", positional = true, default = "-1" }]
env = { DATABASE_URL = "sqlite:///${DB_DIR}/database.db" }

[tool.poe.tasks.revision]
cmd = 'alembic revision --autogenerate  -m "${message}"'
help = "Create a new alembic migration revision"
envfile = ".env"
env = { DATABASE_URL = "sqlite:///${DB_DIR}/database.db" }
args = [
    { name = "message", positional = true, multiple = true, type = "string" },
]

###
# Test tasks
###

[tool.poe.tasks.test]
cmd = "pytest -vvv --cov=src"
help = "Simply run test suite"

[tool.poe.tasks.test-snap]
cmd = "pytest -vvv --snapshot-update"
help = "Simply run test suite and update snapshots"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Same as Black.
line-length = 108
target-version = "py38"
[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D", # "No docs"
    "T20", # "Don't use print or pprint"
    # "ANN",  # Type annotation errors (or the lack of it)
    "ANN101", # The type annotation for `self` is inferred
    "ANN201", #  Missing return type annotation for public function
    "FBT", # I actually don't know why this exists
    "FA", # FA flake8-future-annotations only needed if suppporting python < 3.9
    "A001", # Variable is shadowing a Python builtin
    "A002", # Check for function arguments that use the same names as builtins
    "TD", # TODO checks
    "FIX002", # line conatins TODO
    "PLR0913", # too many arguments
    "EM101", # Checks for the use of string literals in exception constructors
    "TRY003", # Avoid specifying long messages outside the exception class
    "N815", # Variable in class scope should not be mixedCase
    "COM812", # Trailing comma missing - casues ruff formatter issues
    "ISC001" # Implicitly concatenated string literals on one line - casues ruff formatter issues

]
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "D", "ANN"]
"docs/conf.py" = ["INP001", "A001"]
[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]
