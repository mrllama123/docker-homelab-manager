[tool.poetry]
name = "docker-homelab-manager"
description = "a simple web app to manage homelab docker compose services"
authors = ["Bob Bruce <piesrule123@gmail.com>"]
version = "0.1.0"
packages = [{ include = "src" }]

readme = "README.md"
license = "GPL-3.0-or-later"

classifiers = [
    # Get the list of trove classifiers here: https://pypi.org/classifiers/
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
homepage = "https://github.com/mrllama123/docker-homelab-manager"
# keywords = ["awesome", "project"]  # Maximum of 5 keywords

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
fastapi = { extras = ["all"], version = "^0.109.2" }
uvicorn = { extras = ["standard"], version = "^0.27.1" }
python-on-whales = "^0.68.0"
sqlmodel = "^0.0.16"
apscheduler = "^3.10.4"
alembic = "^1.13.1"
jinja2 = "^3.1.3"


[tool.poetry.group.dev.dependencies]
black = "^24.2.0"
hypothesis = "^6.99.13"
mypy = "^1.0.1"
pytest = "^8.0.0"
pytest-clarity = "^1.0.1"
pytest-cov = "^4.0.0"
shed = "^2024.1.1"
toml = "^0.10.2"
pytest-mock = "^3.12.0"
watchdog = "^4.0.0"
pylint = "^3.0.3"
freezegun = "^1.4.0"
ipykernel = "^6.29.0"
pytest-snapshot = "^0.9.0"

[tool.poe.tasks]
# Code linting
mypy = { cmd = "mypy src --strict", help = "Run MyPy on codebase" }
pylint = { cmd = "pylint src", help = "Run pylint on codebase" }
check_black = { cmd = "black src --check" }
check_imports = { cmd = "isort --check-only --profile=black src" }
lint = ["check_black", "check_imports", "pylint"]
api-dev = { cmd = "uvicorn src.api:app --reload --log-config=src/config/log_config.yaml", help = "Run the API in dev mode", envfile = ".env" }
local-dev = ["migrate", "api-dev"]
dev = "docker compose -f docker-compose-dev.yml  up  --build"
clear-cache = { cmd = 'sudo find . -type d -name "__pycache__" -exec rm -r {} +', help = "Clear python cache" }


[tool.poe.tasks.migrate]
shell = "mkdir -p ${DB_DIR} && alembic upgrade ${revision}"
help = "Run alembic migration on ${revision}"
envfile = ".env"
args = [{ name = "revision", positional = true, default = "head" }]

[tool.poe.tasks.downgrade]
cmd = "alembic downgrade ${revision}"
help = "Run alembic migration on ${revision}"
envfile = ".env"
args = [{ name = "revision", positional = true, default = "-1" }]


[tool.poe.tasks.revision]
cmd = 'alembic revision --autogenerate  -m "${message}"'
help = "Create a new alembic migration revision"
envfile = ".env"
args = [
    { name = "message", positional = true, multiple = true, type = "string" },
]


[tool.poe.tasks.format]
shell = "shed"
help = "Format code"

[tool.poe.tasks.test]
cmd = "pytest -vvv --cov=src"
help = "Simply run test suite"

[tool.poe.tasks.test-snap]
cmd = "pytest -vvv --snapshot-update"
help = "Simply run test suite and update snapshots"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
# Same as Black.
line-length = 88
select = ["ALL"]
ignore = [
    # "D",    # "No docs"
    "T20", # "Don't use print or pprint"
    # "ANN",  # Type annotation errors (or the lack of it)
    "ANN101", # The type annotation for `self` is inferred
    "FBT",    # I actually don't know why this exists
    # and it seems useless so ignore it
    # Fix doc rule conflicts
    "D203",
    "D213",
]
target-version = ["py38"]

[tool.pylint.messages_control]
disable = [
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "duplicate-code",
    "fixme",
    "import-error",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "abstract-method",
    "chained-comparison",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "global-statement",
    "missing-docstring",
    "missing-function-docstring",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "too-many-ancestors",
    "unexpected-special-method-signature",
    "consider-using-from-import",
    "try-except-raise",
    "line-too-long",
]
